AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >-



Parameters:
  AppId:
    Type: String

  Project:
    Description: nome do Project
    Type: String
    Default: Pontte

  Environment:
    Description: ambiente de execucao do servico
    Type: String
    AllowedValues:
      - dev
      - staging
      - prod

Conditions:
  Prod: !Equals [ !Ref Environment, prod ]

# https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: python3.8
    MemorySize: 1024
    Timeout: 120
    Environment:
      Variables:
        PAERTNERS_DB: "Organization-aou76nv52bapbebq3uxerkfcce-staging"
        API_ENDPOINT: !If [ Prod, 'api-parcerias.pontte.com.br', !Sub 'api-${Environment}-parcerias.pontte.com.br' ]
    Tags:
      Project: !Ref Project
      Environment: !Ref Environment

#  PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AppId}-${AWS::Region}-PermissionsBoundary'

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  APIDomainName:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      DomainName:
        !If [ Prod, "api-parcerias.pontte.com.br", !Sub "api-${Environment}-parcerias.pontte.com.br" ]
      CertificateArn: "arn:aws:acm:us-east-1:848638426587:certificate/639f5ab2-c77a-4f62-8250-c85716a6753f"

  # Acessos para log
  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn


  LeadsApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "LeadsApi-${Environment}"
      StageName: !Ref Environment

  Deployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref LeadsApi
      Description: LeadsApi deployment
      StageName: "v1"

  LeadsApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: "Leads"
      DomainName: !Ref APIDomainName
      RestApiId: !Ref LeadsApi
      Stage: !Ref Environment
  
  GetAllLeadsFn:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${Project}-GetAllLeadsFn-${Environment}"
      Description: Retorna todos os leads.
      CodeUri: src/Lead/get_all
      Handler: app.lambda_handler
      Tracing: Active
      Events:
        api1:
          Type: Api
          Properties:
            RestApiId: !Ref LeadsApi
            Path: "/v1/leads"
            Method: GET

  GetLeadFn:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${Project}-GetLeadFn-${Environment}"
      Description: Retorna um lead.
      CodeUri: src/Lead/Get
      Handler: app.lambda_handler
      Tracing: Active
      Events:
        api1:
          Type: Api
          Properties:
            RestApiId: !Ref LeadsApi
            Path: "/v1/lead"
            Method: GET

  CreateLeadFn:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${Project}-CreateLeadFn-${Environment}"
      Description: Cria um lead.
      CodeUri: src/Lead/Create
      Handler: app.lambda_handler
      Tracing: Active
      Events:
        api1:
          Type: Api
          Properties:
            RestApiId: !Ref LeadsApi
            Path: "/v1/lead"
            Method: POST

