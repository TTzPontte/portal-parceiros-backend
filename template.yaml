AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >-

Parameters:
  StageName:
    Description: nome do estagio na URL quando em producao
    Type: String
    Default: v1

  Project:
    Description: nome do Project
    Type: String
    Default: Pontte

  Environment:
    Description: ambiente de execucao do servico
    Type: String
    AllowedValues:
      - test
      - dev
      - staging
      - prod
  
  CognitoUserPoolArn:
    Description: ARN do User Pool do Cognito
    Type: String

Conditions:
  Prod: !Equals [ !Ref Environment, prod ]

Globals:
  Function:
    Runtime: python3.8
    MemorySize: 1024
    Timeout: 120
    Environment:
      Variables:
        PAERTNERS_DB: "Organization-aou76nv52bapbebq3uxerkfcce-staging"
        API_ENDPOINT:
          !If [
            Prod,
            "api-parcerias.pontte.com.br",
            !Sub "api-${Environment}-parcerias.pontte.com.br",
          ]
    Tags:
      Project: !Ref Project
      Environment: !Ref Environment

Resources:
  APIDomainName:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      DomainName:
        !If [
          Prod,
          "api-parcerias.pontte.com.br",
          !Sub "api-${Environment}-parcerias.pontte.com.br",
        ]
      CertificateArn: "arn:aws:acm:us-east-1:848638426587:certificate/639f5ab2-c77a-4f62-8250-c85716a6753f"

  # Acessos para log
  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

  LibrariesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${Project}-LibrariesLayer-${Environment}
      Description: common libraries for lambdas
      ContentUri: layers/libraries
      CompatibleRuntimes:
        - python3.8

  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${Project}-CommonLayer-${Environment}
      Description: common resources for lambdas
      ContentUri: layers/common
      CompatibleRuntimes:
        - python3.8

  PartnersApp:
    Type: AWS::Serverless::Application
    Properties:
      Location: src/PartnerOrganization/template.yaml
      Parameters:
        Project: !Ref Project
        Environment: !Ref Environment
        APIDomainName: !Ref APIDomainName
        BasePath: "partners"
        CognitoUserPoolArn: !Ref CognitoUserPoolArn

  LeadsApp:
    Type: AWS::Serverless::Application
    Properties:
      Location: src/Lead/template.yaml
      Parameters:
        Project: !Ref Project
        Environment: !Ref Environment
        APIDomainName: !Ref APIDomainName
        BasePath: "leads"
        CognitoUserPoolArn: !Ref CognitoUserPoolArn

  RegisterApp:
    Type: AWS::Serverless::Application
    Properties:
      Location: src/Register/template.yaml
      Parameters:
        Project: !Ref Project
        Environment: !Ref Environment
        CommonLayer: !Ref CommonLayer
        LibrariesLayer: !Ref LibrariesLayer
        APIDomainName: !Ref APIDomainName
        BasePath: "register"
        CognitoUserPoolArn: !Ref CognitoUserPoolArn

  SimulationApp:
    Type: AWS::Serverless::Application
    Properties:
      Location: src/Simulation/template.yaml
      Parameters:
        Project: !Ref Project
        Environment: !Ref Environment
        CommonLayer: !Ref CommonLayer
        LibrariesLayer: !Ref LibrariesLayer
        APIDomainName: !Ref APIDomainName
        BasePath: "simulations"
        CognitoUserPoolArn: !Ref CognitoUserPoolArn

  CepApp:
    Type: AWS::Serverless::Application
    Properties:
      Location: src/Cep/template.yaml
      Parameters:
        Project: !Ref Project
        Environment: !Ref Environment
        CommonLayer: !Ref CommonLayer
        LibrariesLayer: !Ref LibrariesLayer
        APIDomainName: !Ref APIDomainName
        BasePath: "cep"
        CognitoUserPoolArn: !Ref CognitoUserPoolArn

  WhiteLabelApp:
    Type: AWS::Serverless::Application
    Properties:
      Location: src/WhiteLabel/template.yaml
      Parameters:
        Project: !Ref Project
        Environment: !Ref Environment
        CommonLayer: !Ref CommonLayer
        LibrariesLayer: !Ref LibrariesLayer
        APIDomainName: !Ref APIDomainName
        BasePath: "whitelabel"
        CognitoUserPoolArn: !Ref CognitoUserPoolArn
